# -*- coding: utf-8 -*-
"""Devtown_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xsise9orym0860OmWW5XzaEilV2Nn5CS

Heart Failure Prediction Model Training
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_auc_score
import joblib
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/heart_failure_clinical_records_dataset (1).csv')

df.shape

df.info()

df.describe()

# Check for missing values
df.isnull().sum()

# Check target variable distribution
print("\nTarget Variable Distribution:")
print(df['DEATH_EVENT'].value_counts())
print(f"Death Event Rate: {df['DEATH_EVENT'].mean():.2%}")

"""Exploratory Data Analysis"""

# Target variable distribution
plt.figure(figsize=(12, 8)) # Increase figure size
plt.subplot(2, 3, 1)
df['DEATH_EVENT'].value_counts().plot(kind='bar', color=['skyblue', 'red'])
plt.title('Death Event Distribution')
plt.xlabel('Death Event (0=No, 1=Yes)')
plt.ylabel('Count')

# Age distribution
plt.figure(figsize=(12, 8)) # Increase figure size
plt.hist(df['age'], bins=20, alpha=0.7, color='blue')
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.tight_layout()

# Correlation heatmap
plt.figure(figsize=(12, 8)) # Increase figure size
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, fmt='.2f')
plt.xticks(rotation=45)
plt.title('Feature Correlation Heatmap')

# Feature importance analysis
plt.figure(figsize=(12, 8)) # Increase figure size
death_corr = df.corr()['DEATH_EVENT'].abs().sort_values(ascending=False)[1:]
death_corr.plot(kind='bar', color='orange')
plt.title('Feature Correlation with Death Event')
plt.xticks(rotation=45)

# Age vs Death Event
plt.figure(figsize=(12, 8))
plt.subplot(2, 3, 5)
df.boxplot(column='age', by='DEATH_EVENT', ax=plt.gca())
plt.title('Age Distribution by Death Event')
plt.show()

# Prepare features and target
X = df.drop('DEATH_EVENT', axis=1)
y = df['DEATH_EVENT']

print("\nFeature columns:")
print(X.columns.tolist())

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

print(f"\nTraining set size: {X_train.shape}")
print(f"Test set size: {X_test.shape}")

# Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize models
models = {
    'Random Forest': RandomForestClassifier(n_estimators=100, random_state=42),
    'Gradient Boosting': GradientBoostingClassifier(n_estimators=100, random_state=42),
    'Logistic Regression': LogisticRegression(random_state=42, max_iter=1000),
    'SVM': SVC(random_state=42, probability=True)
}

# Train and evaluate models
results = {}
best_model = None
best_accuracy = 0
best_model_name = None
best_scaler = None

print("\nModel Performance Comparison:")
print("="*60)

for name, model in models.items():
    # Use scaled data for SVM and Logistic Regression
    if name in ['SVM', 'Logistic Regression']:
        X_train_use = X_train_scaled
        X_test_use = X_test_scaled
        current_scaler = scaler
    else:
        X_train_use = X_train
        X_test_use = X_test
        current_scaler = None

    # Train the model
    model.fit(X_train_use, y_train)

    # Make predictions
    y_pred = model.predict(X_test_use)
    y_pred_proba = model.predict_proba(X_test_use)[:, 1]

    # Calculate metrics
    accuracy = accuracy_score(y_test, y_pred)
    auc_score = roc_auc_score(y_test, y_pred_proba)

    # Cross-validation score
    cv_scores = cross_val_score(model, X_train_use, y_train, cv=5, scoring='accuracy')

    results[name] = {
        'accuracy': accuracy,
        'auc': auc_score,
        'cv_mean': cv_scores.mean(),
        'cv_std': cv_scores.std()
    }

    print(f"{name}:")
    print(f"  Accuracy: {accuracy:.4f}")
    print(f"  AUC Score: {auc_score:.4f}")
    print(f"  CV Score: {cv_scores.mean():.4f} (+/- {cv_scores.std()*2:.4f})")
    print(f"  Classification Report:")
    print(classification_report(y_test, y_pred))
    print("-"*60)

    # Track best model
    if accuracy > best_accuracy:
        best_accuracy = accuracy
        best_model = model
        best_model_name = name
        best_scaler = current_scaler

print(f"\nBest Model: {best_model_name} with accuracy: {best_accuracy:.4f}")

# # Hyperparameter tuning for the best performing model
if best_model_name == 'Random Forest':
    param_grid = {
        'n_estimators': [100, 200, 300],
        'max_depth': [None, 10, 20, 30],
        'min_samples_split': [2, 5, 10],
        'min_samples_leaf': [1, 2, 4]
    }

    print(f"\nTuning hyperparameters for {best_model_name}...")
    grid_search = GridSearchCV(RandomForestClassifier(random_state=42),
                               param_grid, cv=5, scoring='accuracy', n_jobs=-1)
    grid_search.fit(X_train, y_train)

    # Use the best model
    best_model = grid_search.best_estimator_
    print(f"Best parameters: {grid_search.best_params_}")

    # Evaluate tuned model
    y_pred_tuned = best_model.predict(X_test)
    accuracy_tuned = accuracy_score(y_test, y_pred_tuned)
    print(f"Tuned model accuracy: {accuracy_tuned:.4f}")

# Feature importance (for tree-based models)
if hasattr(best_model, 'feature_importances_'):
    feature_importance = pd.DataFrame({
        'feature': X.columns,
        'importance': best_model.feature_importances_
    }).sort_values('importance', ascending=False)

    print("\nFeature Importance:")
    print(feature_importance)

    # Plot feature importance
    plt.figure(figsize=(10, 8))
    sns.barplot(data=feature_importance.head(10), x='importance', y='feature', palette='viridis')
    plt.title('Top 10 Feature Importance')
    plt.xlabel('Importance')
    plt.tight_layout()
    plt.show()

# Final model evaluation
y_pred_final = best_model.predict(X_test if best_scaler is None else X_test_scaled)
final_accuracy = accuracy_score(y_test, y_pred_final)

print(f"\nFinal Model Performance:")
print(f"Model: {best_model_name}")
print(f"Accuracy: {final_accuracy:.4f}")
print(f"Classification Report:")
print(classification_report(y_test, y_pred_final))

# Confusion Matrix
plt.figure(figsize=(8, 6))
cm = confusion_matrix(y_test, y_pred_final)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['No Death', 'Death'],
            yticklabels=['No Death', 'Death'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Save the model and scaler
joblib.dump(best_model, 'heart_failure_model.pkl')
if best_scaler is not None:
    joblib.dump(best_scaler, 'scaler.pkl')

print(f"\nModel saved as 'heart_failure_model.pkl'")
if best_scaler is not None:
    print("Scaler saved as 'scaler.pkl'")

# Create feature names list for the Flask app
feature_names = X.columns.tolist()
joblib.dump(feature_names, 'feature_names.pkl')
print("Feature names saved as 'feature_names.pkl'")

print(f"\nProject completed! Final accuracy: {final_accuracy:.4f}")
print(f"Achievement: {'✅ Above 80%' if final_accuracy >= 0.8 else '❌ Below 80%'}")